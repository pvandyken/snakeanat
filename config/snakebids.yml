bids_dir: '/path/to/bids_dir'
output_dir: '/path/to/output_dir'

#enable printing debug statements during parsing -- disable if generating dag visualization
debug: False


#list of analysis levels in the bids app
analysis_levels: &analysis_levels
 - participant
 - group


#mapping from analysis_level to set of target rules or files
targets_by_analysis_level:
  participant:
    - 'participant'  # if '', then the first rule is run
  group:
    - 'group'


pybids_inputs:
  t1w:
    filters:
      extension: '.nii.gz'
      datatype: 'anat'
      scope: raw
      suffix: T1w
      echo: false
    wildcards:
      - subject
      - session
      - run


parse_args:
  bids_dir:
    help: The directory with the input dataset formatted according
          to the BIDS standard.

  output_dir:
    help: The directory where the output files
          should be stored. If you are running group level analysis
          this folder should be prepopulated with the results of the
          participant level analysis.

  analysis_level:
    help: Level of the analysis that will be performed.
    choices: *analysis_levels

  --participant_label:
    help: The label(s) of the participant(s) that should be analyzed. The label
          corresponds to sub-<participant_label> from the BIDS spec
          (so it does not include "sub-"). If this parameter is not
          provided all subjects should be analyzed. Multiple
          participants can be specified with a space separated list.
    nargs: '+'

  --exclude_participant_label:
    help: The label(s) of the participant(s) that should be excluded. The label
          corresponds to sub-<participant_label> from the BIDS spec
          (so it does not include "sub-"). If this parameter is not
          provided all subjects should be analyzed. Multiple
          participants can be specified with a space separated list.
    nargs: '+'

  --derivatives:
    help: 'Path(s) to a derivatives dataset, for folder(s) that contains multiple derivatives datasets (default: %(default)s) '
    action: store_true
    default: False

  --fs_license:
    help: Path to the freesurfer license file

  --from-dwi:
    help: >
      Use a diffusion scan as input. SynthSR will be used to make a synthetic T1w image
      based on the average b0 volume in the diffusion scan.
    action: store_true
    default: false




#singularity containers
containers:
  fastsurfer: 'docker://deepmi/fastsurfer:gpu-v2.0.4'
  ciftify: 'docker://tigrlab/fmriprep_ciftify:v1.3.2-2.3.3'
  autotop: 'docker://khanlab/autotop_deps:v0.4.1'
  python: 'docker://khanlab/pythondeps-snakedwi:v0.2.0'
  synthsr: 'docker://akhanf/synthsr:main'
  itksnap: 'docker://khanlab/itksnap:latest'